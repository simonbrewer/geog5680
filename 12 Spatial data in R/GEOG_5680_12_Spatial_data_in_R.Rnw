\documentclass[aspectratio=169]{beamer}
\usepackage{multirow}
%\usecolortheme{beaver}
%\usecolortheme[RGB={129,3,3}]{structure}
\usetheme{CambridgeUS}
\usecolortheme{seahorse}

% Standard header (will need to change date!)
\title[GEOG 5680 Summer '21]{GEOG 5680\\Introduction to R}
\subtitle[Intro]{12: Spatial data in R}
\author[S. Brewer]{Simon Brewer}
\institute[Univ. Utah]{
  Geography Department\\
  University of Utah\\
  Salt Lake City, Utah 84112\\[1ex]
  \texttt{simon.brewer@geog.utah.edu}
}
\date[May 20, 2021]{May 20, 2021}

\begin{document}
<<setup, include=FALSE>>=
opts_chunk$set(size = 'tiny', fig.height=5, warning=FALSE)
@

%\maketitle
%--- the titlepage frame -------------------------%
\begin{frame}[plain]
\titlepage
\end{frame}

%--- Slide ----------------%
%\section{Outline}
% \begin{frame}{Outline}
% \begin{itemize}
%   \item Introduction to spatial data in R
%   \item Random sampling: permutations, bootstrapping and cross-validation
% \end{itemize}
% \end{frame}

\section{Spatial data analysis}
%--- Slide ----------------%
\begin{frame}{Spatial data analysis}
\begin{itemize}
  \item	Characterized by attention to location, spatial interaction, spatial structure and spatial processes. Location may be:
  \begin{itemize}
    \item Individual site observations
    \item Micro-units, such as households, store sites, settlements
    \item Aggregate spatial units, such as electoral districts, counties, states or even countries
  \end{itemize}
  \item Examples:
  \begin{itemize}
    \item Are disease incidents clustered? Are the clusters related to factors (e.g. poverty or pollution)?
  %\item Given soils samples, what part of region is polluted?
    \item Given air quality measures, where are people most at risk of exposure to particulates?
    \item Do governments compare policies to their neighbors?
  \end{itemize}
\end{itemize}
\end{frame}

%--- Slide ----------------%
\begin{frame}{Spatial data analysis}
Location, location, location
\begin{itemize}
  \item	Location has crucial role in analysis:
  \begin{itemize}
    \item Absolute (coordinates)
    \item Relative to other observations
  \end{itemize}
  \item Two classes of spatial effects (Anselin, 1990):
  \begin{itemize}
    \item Spatial autocorrelation
    \item Spatial heterogenetiy
  \end{itemize}
\end{itemize}
\end{frame}

%--- Slide ----------------%
\begin{frame}{Spatial autocorrelation}
\begin{itemize}
\item	Tobler's law: 'Everything is related to everything else, but near things are more related than distant things' - i.e. similar values cluster 
\begin{itemize}
\item High crime areas or climatically similar regions
\end{itemize}
\item<2-> Implies that most geographical data will no longer satisfy the usual statistical assumption of independence of observations
\item<2-> Results in larger variance and lower significance compared to independent data
\item<2-> Can be remedied by larger sample sizes, better sampling strategies or by use of specialized analysis
\end{itemize}
\end{frame}

%--- Slide ----------------%
\begin{frame}{Spatial heterogeneity}
\begin{itemize}
\item	Spatial or regional differentiation resulting from the intrinsic uniqueness of each location
\item<2->	Different spatial subsets may have different means, variances or other parameter values 
\item<2->	Implies that assumption of stationarity does not hold across study region (same statistical distribution)
\item<3->	Spatial \emph{regimes} --- discrete changes across landscape (e.g. difference in mean and variance of income between inner city and suburb)
\item<3->	Spatial \emph{drift} --- continuous variation in parameter (e.g. changing variance of precipitation with distance to monsoon region)
\end{itemize}
\end{frame}

\subsection{Spatial data types}
%--- Slide ----------------%
\begin{frame}{Spatial data types}
From Cressie (1991):
\begin{itemize}
\item	Point processes (location of objects in space)
\item	Areal or lattice --- discrete variation of values aggregated across regular or irregular regions
\item	Geostatistical --- continuous variation of values
\end{itemize}
Expressed as geometric features: 
\begin{itemize}
\item Points/Lines/Areal units (polygons)/Regular grids
\item In a plane, or, less frequently, on a surface
\end{itemize}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Point process data}
\begin{columns}
\begin{column}{0.5\textwidth}
<<echo=FALSE, include=FALSE>>=
require(spatstat)
@  
<<echo=FALSE>>=
data(swedishpines)
plot(swedishpines)
@
\end{column}
\begin{column}{0.5\textwidth}
<<echo=FALSE>>=
chorley.extra$plotit()
@
\end{column}
\end{columns}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Areal data}
<<echo=FALSE, include=FALSE>>=
library(sf)
library(tmap)
@
<<echo=FALSE, message=FALSE, warning=FALSE, fig.height=4.5, results='hide'>>=
library(tmap)
library(sf)

states <- st_read("states.shp")
st_crs(states) <- 4326
@
\begin{center}
<<out.width='.7\\linewidth', echo=FALSE>>=
p1 <- tm_shape(states) + tm_fill("math", palette = "Purples", 
                           title = "MATH SAT Scores") + 
  tm_borders()

print(p1)

@
\end{center}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Geostatistical data}
\begin{columns}
\begin{column}{0.5\textwidth}
<<echo=FALSE, include=TRUE, results='hide', message=FALSE>>=
library(sp)
library(gstat)
library(tmap)
data(meuse)
meuse <- st_as_sf(meuse, 
                        coords = c("x", "y"),
                        crs = 28992)

data("meuse.grid")
meuse.grid <- st_as_sf(meuse.grid, 
                        coords = c("x", "y"),
                        crs = 28992)

lzn.vgm = variogram(log(zinc) ~ 1, meuse)
# plot(lzn.vgm)
lzn.fit = fit.variogram(lzn.vgm, model = vgm(1, "Sph", 900, 1))
lzn.kriged = krige(log(zinc) ~ 1, meuse, meuse.grid, model = lzn.fit)

riv <- st_read("meuse.riv.shp")
st_crs(riv) <- 28992

tm_shape(meuse) + tm_symbols(col = "zinc") +
  tm_shape(riv) + tm_borders()
@
\end{column}
\begin{column}{0.5\textwidth}
<<echo=FALSE>>=
lzn.kriged <- st_as_sf(lzn.kriged)
st_crs(lzn.kriged) <- 28992
names(lzn.kriged)[1] <- "lzn.pred" 

tm_shape(lzn.kriged) + 
  tm_symbols(col = "lzn.pred", size = 0.1, border.lwd = NA) +
  tm_shape(riv) + tm_borders()

@
\end{column}
\end{columns}
\end{frame}

\section{Spatial data in R}
%--- Slide ----------------%
\begin{frame}{Spatial data in R}
Key spatial packages:
  \begin{itemize}
  \item \textbf{sp} provided original specification of spatial data classes (S4 objects)
  \item \textbf{sf} newer package based on \emph{simple features}, ISO 19125
  \item Spatial analytical packages build on these
    \begin{itemize}
    \item \textbf{spatstat} --- analysis of spatial point processes
    \item \textbf{spatdep} and \textbf{spatialreg} --- spatial regression models
    \item \textbf{gstat} --- geostatistical analysis
    \end{itemize}
  \end{itemize}
\end{frame}

%--- Slide ----------------%
\begin{frame}{Working with vector data}
Vector data
  \begin{itemize}
  \item \textbf{sf} package (uses GDAL/OGR library)
  \begin{itemize}
  \item Allows import and export of shapefiles and other standard vector formats ($\approx 93$ different formats)
  \item \texttt{st\_read()} and \texttt{st\_write()}
  \end{itemize}
  \item \textbf{rgdal} package (uses GDAL/OGR library)
  \item \textbf{rgeos} for extra topology/geometry functions
  \end{itemize}
\end{frame}

%--- Slide ----------------%
\begin{frame}{Working with raster data}
Raster data
\begin{itemize}
\item \textbf{raster} package (uses GDAL library, $\approx 150$ formats)
\item Allows import and export of most raster formats (ArcInfo/GeoTIFF/ESRI/Most RS images/NetCDF)
\item Will work with large files and stacks/bricks (multi-band raster data)
\item See also \texttt{readAsciiGrid()} in \textbf{maptools} (reads ESRI grids), \textbf{ncdf4} package, \textbf{landsat} package for remote sensing image correction
\item \textbf{stars} package for working with space-time data in dense arrays

\end{itemize}
\end{frame}

%--- Slide ----------------%
\begin{frame}{Data import/export}
Raster data
\begin{itemize}
\item \textbf{raster} package (uses GDAL library, $\approx$ 150 formats)
\item Allows import and export of most raster formats (ArcInfo/GeoTIFF/ESRI/Most RS images/NetCDF)
\item Will work with large files and stacks/bricks (multi-band raster data)
\item See also \texttt{readAsciiGrid()} in \textbf{maptools} (reads ESRI grids), \textbf{ncdf4} package, \textbf{landsat} package for remote sensing image correction
\item \textbf{stars} package for working with space-time data in dense arrays

\end{itemize}
\end{frame}

%--- Slide ----------------%
\begin{frame}{Spatial data classes in \textbf{sf}}
Each \texttt{sf} object consists of four things
\begin{itemize}
\item Geometry
\item Attributes
\item Coordinate Reference System
\item Bounding box
\end{itemize}
\end{frame}

%--- Slide ----------------%
\begin{frame}{Geometries in \textbf{sf}}
\begin{columns}
\begin{column}{0.5\textwidth}
  \begin{itemize}
    \item Defines the type of spatial object
    \item Standard GIS types (single and multi)
  \end{itemize}
\end{column}
\begin{column}{0.5\textwidth}
  \begin{center}
  \includegraphics[width=0.8\textwidth]{./images/sfgeometries.png}
  \end{center}
\end{column}
\end{columns}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Attributes in \textbf{sf}}
\begin{columns}
\begin{column}{0.5\textwidth}
  \begin{itemize}
    \item Hold data associated with spatial objects
    \item Standard R \texttt{data.frame} with geometry
  \end{itemize}
\end{column}
\begin{column}{0.5\textwidth}
<<>>=
states
@
\end{column}
\end{columns}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{CRS in \textbf{sf}}
\begin{columns}
\begin{column}{0.5\textwidth}
  \begin{itemize}
    \item Coordinate reference system (CRS)
    \item Uses WKT format
    \item Can be easily defined using EPSG codes (e.g. WGS 84 = 4326)
  \end{itemize}
\end{column}
\begin{column}{0.5\textwidth}
<<>>=
st_crs(states)
@
\end{column}
\end{columns}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Re-projections using CRS}
\begin{itemize}
\item The \textbf{sf} library has a function (\texttt{st\_transform()}) to convert between projections
\end{itemize}
<<echo=TRUE, message=FALSE>>=
oregon = st_read("./oregon/orotl.shp")
st_crs(oregon) <- 4326
format(st_crs(oregon))
@
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Map projections}
\begin{itemize}
  \item Use the \texttt{st\_transform()} function to reproject 
  \item Reproject to Lambert (EPSG 2992)
\end{itemize}
<<echo=TRUE, tidy=FALSE>>=
oregon.proj <- st_transform(oregon, crs = 2992)
format(st_crs(oregon.proj))
@
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Map projections}
\begin{columns}
\begin{column}{0.5\textwidth}
<<echo=FALSE>>=
plot(st_geometry(oregon))
title("WGS 84")
@
\end{column}
\begin{column}{0.5\textwidth}
<<echo=FALSE>>=
plot(st_geometry(oregon.proj))
title("Oregon GIC Lambert")
@
\end{column}
\end{columns}
\end{frame}

\section{Visualizing spatial data}
%--- Slide ----------------%
\begin{frame}[fragile]{Visualizing spatial data}
\begin{columns}
\begin{column}{0.6\textwidth}
  \begin{itemize}
  \item \textbf{sf} package provides basic function \texttt{plot()}, which works in a similar way to R's base plot function
  \end{itemize}
\end{column}
\begin{column}{0.4\textwidth}
<<echo=FALSE, results='hide'>>=
NY8 = st_read("./NY_data/NY8_utm18.shp")
Syracuse = NY8[NY8$AREANAME == "Syracuse city",]
@
<<echo=TRUE, cache=FALSE>>=
plot(Syracuse["PCTOWNHOME"])
@
\end{column}
\end{columns}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Visualizing spatial data}
\begin{columns}
\begin{column}{0.6\textwidth}
  \begin{itemize}
  \item \textbf{sf} package provides basic function \texttt{plot()}, which works in a similar way to R's base plot function
  \end{itemize}
\end{column}
\begin{column}{0.4\textwidth}
<<echo=TRUE, cache=FALSE>>=
plot(meuse["zinc"], pch = 16)
@
\end{column}
\end{columns}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Visualizing spatial data}
\begin{columns}
\begin{column}{0.5\textwidth}
\begin{itemize}
  \item Extend basic visualization using \textbf{ggplot2}
\end{itemize}
<<echo=TRUE, eval=FALSE>>=
library(ggplot2)
ggplot() +
  geom_sf(data = Syracuse, aes(fill = PCTOWNHOME)) + 
  theme_bw()
@
\end{column}
\begin{column}{0.5\textwidth}
<<echo=FALSE>>=
library(ggplot2)
ggplot() +
  geom_sf(data = Syracuse, aes(fill = PCTOWNHOME)) + 
  theme_bw()
@
\end{column}
\end{columns}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Visualizing spatial data}
\begin{columns}
\begin{column}{0.5\textwidth}
\begin{itemize}
  \item Extend basic visualization using \textbf{tmap}
\end{itemize}
<<echo=TRUE, eval=FALSE>>=
library(tmap)
tm_shape(Syracuse) + 
  tm_fill("PCTOWNHOME") +
  tm_borders() +
  tm_compass(position = c("left", "top")) +
  tm_scale_bar(position = c("right", "top"))
@
\end{column}
\begin{column}{0.5\textwidth}
<<echo=FALSE>>=
library(tmap)
tm_shape(Syracuse) + 
  tm_fill("PCTOWNHOME") +
  tm_borders() +
  tm_compass(position = c("left", "top")) +
  tm_scale_bar(position = c("right", "top"))
@
\end{column}
\end{columns}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Visualizing spatial data}
\begin{columns}
\begin{column}{0.5\textwidth}
\begin{itemize}
  \item Extend basic visualization using \textbf{tmap}
  \item Additional color palettes (viridis and ColorBrewer)
\end{itemize}
<<echo=TRUE, eval=FALSE>>=
library(tmap)
tm_shape(Syracuse) + 
  tm_fill("PCTOWNHOME", palette = "-magma") +
  tm_borders() +
  tm_compass(position = c("left", "top")) +
  tm_scale_bar(position = c("right", "top"))
@
\end{column}
\begin{column}{0.5\textwidth}
<<echo=FALSE>>=
library(tmap)
tm_shape(Syracuse) + 
  tm_fill("PCTOWNHOME", palette = "-magma") +
  tm_borders() +
  tm_compass(position = c("left", "top")) +
  tm_scale_bar(position = c("right", "top"))
@
\end{column}
\end{columns}
\end{frame}

%--- Slide ----------------%
\begin{frame}[fragile]{Visualizing spatial data}
\begin{columns}
\begin{column}{0.5\textwidth}
\begin{itemize}
  \item Extend basic visualization using \textbf{tmap}
  \item Easily add extra layers
\end{itemize}
<<echo=TRUE, eval=FALSE>>=
tm_shape(meuse) + 
  tm_symbols(col = "zinc", palette = "Greens") +
  tm_shape(riv) + 
  tm_borders()

@
\end{column}
\begin{column}{0.5\textwidth}
<<echo=FALSE>>=
tm_shape(meuse) + tm_symbols(col = "zinc", palette = "Greens") +
  tm_shape(riv) + tm_borders()
@
\end{column}
\end{columns}
\end{frame}


\end{document}